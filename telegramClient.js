const { Telegraf, Extra, Markup, Scenes, session } = require("telegraf");
const SceneGenerator = require("./telegramScenes");
const telegramController = require("./telegramController");
const { SantaUser, Op } = require("./db");
const textAnalyzer = require("./textAnalyzer");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_API_KEY);
//bot.use(Telegraf.log());
bot.use(session());

// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ü–µ–Ω–∞–º–∏
const reviewsScene = new SceneGenerator().ReviewsScene();
const stage = new Scenes.Stage([reviewsScene]);
bot.use(stage.middleware());

// –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.start((ctx) => {
  ctx.setMyCommands([
    { command: "reviews", description: "–û—Ç–∑—ã–≤—ã –æ —Ñ–∏–ª—å–º–∞—Ö" },
    { command: "santa", description: "–¢–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞" },
    { command: "menu", description: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" },
    { command: "hello", description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
  ]);
  ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
});
bot.help((ctx) => ctx.reply("Send me a sticker"));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
bot.command("menu", (ctx) => {
  ctx.session = {};
  return ctx.replyWithMarkdownV2(
    "``` –ë–æ—Ç —É–º–µ–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏–≥—Ä—É –≤ —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—É –∏ –∏—Å–∫–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ —Ñ–∏–ª—å–º ```"
  );
});
bot.command("hello", (ctx) => ctx.reply("–ü—Ä–∏–≤–µ—Ç üëã"));
bot.command("santa", async (ctx) => {
  const [user] = await SantaUser.findOrCreate({
    where: {
      userid: ctx.from.id,
    },
  });
  if (!user.phone) {
    return ctx.reply(
      "–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å –±–æ—Ç–æ–º",
      Markup.keyboard([
        Markup.button.contactRequest("üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
      ]).resize()
    );
  }
  if (user.partner != -1) {
    const partner = await SantaUser.findOne({
      where: {
        userid: user.partner,
      },
    });
    ctx.reply("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å, –∫–æ–º—É –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏!");
    return ctx.replyWithContact(partner.phone, "üéÅüéÑüéÅ");
  } else {
    try {
      const potentialPartners = await SantaUser.findAll({
        where: {
          partner: -1,
          userid: {
            [Op.ne]: user.userid,
          },
          phone: {
            [Op.ne]: null,
          },
        },
      });
      if (potentialPartners.length > 0) {
        potentialPartners[0].partner = user.userid;
        await potentialPartners[0].save();
        user.partner = potentialPartners[0].userid;
        user.save();
        ctx.reply("–ù–∞—à–µ–ª—Å—è —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è —Ç–∞–π–Ω–æ–≥–æ —Å–∞–Ω—Ç—ã!");
        return ctx.replyWithContact(potentialPartners[0].phone, "üéÅüéÑüéÅ");
      } else {
        return ctx.reply(
          "–°–µ–π—á–∞—Å –∏–≥—Ä–∞—Ç—å –Ω–µ —Å –∫–µ–º, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
          Markup.keyboard([["/santa"]]).resize()
        );
      }
    } catch (ex) {
      console.log(ex);
    }
  }
});
bot.command("reviews", async (ctx) => {
  ctx.scene.enter("reviews");
});
bot.on("sticker", (ctx) => ctx.reply("üëç"));
bot.hears("hi", (ctx) => {});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on("message", async (ctx) => {
  console.log("MESSAGE", ctx.session, ctx.message.contact);
  const text = ctx.message.text;

  // –ï—Å–ª–∏ —Ñ–∏–ª—å–º
  if (ctx.session?.films?.length) {
    await telegramController.handleFilms(ctx, text);
    ctx.session = {};
    return;
  }

  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
  if (ctx.message.contact) {
    try {
      const [user] = await SantaUser.findOrCreate({
        where: {
          userid: ctx.from.id,
        },
      });
      user.phone = ctx.message.contact.phone_number;
      await user.save(user);
      return ctx.reply(
        "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
        Markup.keyboard([["/santa"]]).resize()
      );
    } catch (ex) {
      console.log(ex);
    }
  }

  ctx.session = {};
  return ctx.reply(
    "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + (await textAnalyzer.tonal(text, true)).score,
    telegramController.noButton
  );
  //console.log(ctx.callbackQuery?.data);
});

module.exports = bot;
