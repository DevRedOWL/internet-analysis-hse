import { Telegraf, Scenes } from 'telegraf';
import { markdownTable } from 'markdown-table';
import { V9kuUser, V9kuMatch, V9kuMessage, V9kuVote, Op, initDB } from './v9ku.db.js';
import {
  scoreButtonsBuilder,
  matchCaptionBuilder,
  votedCaptionBuilder,
  extractMessageContext,
  buildAllCommands,
} from './v9ku.service.js';
import { v9kuEventScheduler } from './v9ku.eventScheduler.js';
import SceneBuilder from './v9ku.scenes.js';
import { db, credentials, admins } from '../config.js';
import PostgresSession from 'telegraf-postgres-session';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
export class V9kuClient {
  bot;
  botName = 'V9ku';

  async init() {
    await initDB(async () => {
      console.log(`[${new Date().toLocaleString('ru-RU')}] [${this.botName}] DB ready`);
      this.bot.launch();
      await v9kuEventScheduler.init(this.bot);
      console.log(`[${new Date().toLocaleString('ru-RU')}] [${this.botName}] Matches scheduled`);
    });
  }

  async stop(signal = 'SIGINT') {
    await this.bot.stop(signal);
  }

  constructor() {
    console.log(`[${new Date().toLocaleString('ru-RU')}] [${this.botName}] Starting a bot...`);
    const bot = new Telegraf(credentials.v9ku_token);
    const pgSession = new PostgresSession({
      connectionString: `${db.dialect}://${db.user}:${db.password}@${db.host}:${db.port}/${db.database}`,
      ssl: false,
    }).middleware();
    bot.use(pgSession);

    // –°—Ü–µ–Ω—ã
    const createEventScene = new SceneBuilder().EventCreateScene();
    const setScoreScene = new SceneBuilder().ScoreSetScene();
    const sendingScene = new SceneBuilder().SendingScene();
    const stage = new Scenes.Stage([createEventScene, setScoreScene, sendingScene]);
    bot.use(stage.middleware());
    bot.command('create_match', async (ctx) => {
      if (admins.list.indexOf(ctx.from.id) !== -1) {
        ctx.scene.enter('create_match');
      } else {
        ctx.reply(admins.error_message);
      }
    });
    bot.command('set_score', async (ctx) => {
      if (admins.list.indexOf(ctx.from.id) !== -1) {
        ctx.scene.enter('set_score');
      } else {
        ctx.reply(admins.error_message);
      }
    });
    bot.command('sending', async (ctx) => {
      if (admins.list.indexOf(ctx.from.id) !== -1) {
        ctx.scene.enter('sending');
      } else {
        ctx.reply(admins.error_message);
      }
    });

    // –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    bot.start(async (ctx) => {
      const [user] = await V9kuUser.findOrCreate({
        where: {
          userId: ctx.from.id,
        },
      });
      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ "–í–î–µ–≤—è—Ç–∫—É"\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /help`);
      if (!user.enabled) {
        return ctx.replyWithMarkdown(
          '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤. \n–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É',
          {
            reply_markup: {
              one_time_keyboard: true,
              keyboard: [[{ text: '‚öΩ –°–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', request_contact: true }]],
              force_reply: true,
            },
          },
        );
      }
    });
    bot.on('contact', async (ctx) => {
      const user = await V9kuUser.findOne({ where: { userId: ctx.from.id } });
      await V9kuUser.update(
        {
          phone: ctx.message.contact.phone_number,
          name: `${ctx.message.contact.first_name} ${ctx.message.contact.last_name || ''}`.trim(),
          enabled: true,
        },
        { where: { id: user.id } },
      );
      ctx.telegram.setMyCommands(buildAllCommands(), {
        scope: { type: 'chat', chat_id: ctx.from.id },
      });
      ctx.reply(`${ctx.from.first_name}, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö!`, {
        reply_markup: { remove_keyboard: true },
      });
    });
    bot.help((ctx) =>
      ctx.replyWithMarkdown(`*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
    
    –ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –±–æ—Ç –∏ —Å–¥–µ–ª–∞—é —Ç–≤–æ—é –∂–∏–∑–Ω—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ —è—Ä—á–µ –∏ –≤–µ—Å–µ–ª–µ–π ‚öΩÔ∏èü§™
    –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –º–∞—Ç—á, —Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É.
    ‚ÄºÔ∏è*–ó–∞ 1 —á–∞—Å* –¥–æ –º–∞—Ç—á–∞ –ø—Ä–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è‚ÄºÔ∏è
    
    –í –º–µ–Ω—é –Ω–∏–∂–µ 3 –∫–æ–º–∞–Ω–¥—ã:
    /score - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—â–∏–π —Å—á–µ—Ç / –≤—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ / —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã )
    /rating - –æ–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    /help - —Ç–µ–∫—É—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    
    –£–¥–∞—á–∏ —Ç–µ–±–µ!
    P.S. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ @DimaTomchuk`),
    );

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.command('stop', async (ctx) => {
      const [user] = await V9kuUser.findOrCreate({
        where: {
          userId: ctx.from.id,
        },
      });
      user.enabled = false;
      await user.save();
      return ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞');
    });

    // –°—á–µ—Ç
    bot.command('rating', async (ctx) => {
      const formattedUsers = (
        await V9kuUser.findAll({
          where: { name: { [Op.ne]: null }, enabled: true },
          order: [['score', 'DESC']],
          limit: 50,
        })
      ).map((user, idx) => [
        idx + 1,
        user.score,
        user.perfect,
        (idx === 0 ? 'ü•á' : idx === 1 ? 'ü•à' : idx === 2 ? 'ü•â' : '') + user.name.substr(0, 11),
      ]);
      const table = markdownTable([['–ú–µ—Å—Ç–æ', '–°—á–µ—Ç', '–ì–æ–ª', '–ò–º—è'], ...formattedUsers], {
        delimiterStart: false,
        delimiterEnd: false,
      });
      ctx.replyWithMarkdown(`*–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞*\n\n\`\`\`\n${table}\n\`\`\``);
    });

    bot.command('score', async (ctx) => {
      const user = await V9kuUser.findOne({ where: { userId: ctx.from.id } });
      if (!user) {
        return ctx.replyWithMarkdown(
          `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`,
        );
      }
      const place =
        (
          await V9kuUser.findAll({
            where: { name: { [Op.ne]: null } },
            order: [['score', 'DESC']],
          })
        ).findIndex((item) => item.userId == ctx.from.id) + 1;
      const votesCount = await V9kuVote.count({ where: { userId: ctx.from.id } });
      const table = markdownTable([
        ['–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'],
        ['–û–±—â–∏–π —Å—á–µ—Ç', user.score],
        //['–í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤', votesCount],
        ['–¢–æ—á–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤', user.perfect],
        ['–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ', place],
        //['–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', user.createdAt.toLocaleDateString('ru-RU')],
      ]);
      ctx.replyWithMarkdown(`\`\`\`\n${table}\n\`\`\``);
    });

    // –¢–µ—Å—Ç–æ–≤—ã–π
    bot.command('test', async (ctx) => {
      if (admins.list.indexOf(ctx.from.id) === -1) {
        ctx.reply(admins.error_message);
      }

      const matchData = await V9kuMatch.findOne({
        where: { id: 0 },
      });
      const caption = matchCaptionBuilder(ctx.from.first_name, matchData);

      const message = await ctx.replyWithMarkdown(caption.text, {
        reply_markup: {
          inline_keyboard: [caption.buttons],
        },
      });
      await V9kuMessage.create({
        messageId: message.message_id,
        userId: ctx.from.id,
        matchId: matchData.id,
      });
    });

    // –ü—Ä–æ–≥–Ω–æ–∑—ã
    bot.action('predict', async (ctx) => {
      try {
        const { matchData } = await extractMessageContext(ctx);
        if (new Date() > new Date(matchData.date.getTime() - 60000)) {
          return await ctx.editMessageText('–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –≤—ã—à–ª–æ');
        }
        await ctx.editMessageText(
          `–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∑–∞–±—ä–µ—Ç –∫–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞, \n–∑–∞—Ç–µ–º, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"\n–ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ 6+, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç @DimaTomchuk`,
          {
            reply_markup: {
              inline_keyboard: scoreButtonsBuilder(matchData.team1, matchData.team2),
            },
          },
        );
      } catch (ex) {
        return await ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      }
    });
    for (let i = 1; i <= 2; i++) {
      for (let j = 0; j <= 6; j++) {
        bot.action(`team${i}_${j}`, async (ctx) => {
          const { matchData } = await extractMessageContext(ctx);
          if (new Date() > new Date(matchData.date.getTime() - 60000)) {
            return await ctx.editMessageText('–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –≤—ã—à–ª–æ');
          }
          const [vote] = await V9kuVote.findOrCreate({
            where: {
              matchId: matchData.id,
              userId: ctx.from.id,
            },
          });
          const score = j < 6 ? j : -1;
          await V9kuVote.update({ [`team${i}`]: score }, { where: { id: vote.id } });
          try {
            await ctx.editMessageText(
              `–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∑–∞–±—ä–µ—Ç –∫–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞, –∑–∞—Ç–µ–º, –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"`,
              {
                reply_markup: {
                  inline_keyboard: scoreButtonsBuilder(matchData.team1, matchData.team2, {
                    1: i === 1 ? j : vote.team1 >= 0 ? vote.team1 : 6,
                    2: i === 2 ? j : vote.team2 >= 0 ? vote.team2 : 6,
                  }),
                },
              },
            );
          } catch (ex) {
            console.log('–Æ–∑–µ—Ä –Ω–∞–∂–∞–ª —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É', ex.message);
          }
        });
      }
    }
    bot.action('confirm_prediction', async (ctx) => {
      const { matchData } = await extractMessageContext(ctx);
      if (new Date() > new Date(matchData.date.getTime() - 1000 * 60)) {
        return await ctx.editMessageText('–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –≤—ã—à–ª–æ');
      }
      const voteData = await V9kuVote.findOne({
        where: {
          matchId: matchData.id,
          userId: ctx.from.id,
        },
      });
      if (voteData && typeof voteData.team1 == 'number' && typeof voteData.team2 == 'number') {
        const caption = votedCaptionBuilder(ctx.from.first_name, matchData, voteData);

        await ctx.editMessageText(caption.text, {
          reply_markup: {
            inline_keyboard: [caption.buttons],
          },
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.on('message', async (ctx) => {
      const text = ctx.message.text;
      return ctx.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    });

    // Set property
    this.bot = bot;
  }
}
