import { Scenes } from 'telegraf';
import { timeFormatConfig, countReward, matchCaptionBuilder } from './v9ku.service.js';
import { V9kuMatch, V9kuUser, V9kuMessage, V9kuVote, Op, sequelize } from './v9ku.db.js';
import { v9kuEventScheduler } from './v9ku.eventScheduler.js';

export default class SceneBuilder {
  EventCreateScene() {
    const eventScene = new Scenes.BaseScene('create_match');

    const actionEnum = {
      EDIT_MENU: 'create_event_menu',
      EDIT_DATE: 'create_event_date',
      EDIT_TEAM: 'create_event_team',
      EDIT_COEF: 'create_event_url',
      EDIT_URL: 'create_event_url',
      SAVE_EVENT: 'create_event_save',
    };

    eventScene.enter((ctx) => {
      if (!ctx.session.createEvent) {
        ctx.session.createEvent = { step: actionEnum.EDIT_MENU, teams: [] };
      } else {
        ctx.session.createEvent.step = actionEnum.EDIT_MENU;
      }

      const event = ctx.session.createEvent;
      ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `üìÖ ${
                  event.date
                    ? new Date(event.date).toLocaleString('ru-RU', timeFormatConfig)
                    : '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É'
                }`,
                callback_data: actionEnum.EDIT_DATE,
              },
              {
                text: `${
                  event.teams[1] && event.teams[2]
                    ? event.teams[1] + ' - ' + event.teams[2]
                    : 'üë• –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã'
                }`,
                callback_data: actionEnum.EDIT_TEAM,
              },
            ],
            [
              {
                text: `${event.coef ? 'üíØ –ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç: ' + event.coef : 'üíØ –ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç: 1.0'}`,
                callback_data: actionEnum.EDIT_COEF,
              },
              {
                text: `üîó ${event.url ? event.url : '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É'}`,
                callback_data: actionEnum.EDIT_URL,
              },
            ],
            [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ', callback_data: actionEnum.SAVE_EVENT }],
          ],
        },
      });
    });

    eventScene.action(actionEnum.EDIT_DATE, async (ctx) => {
      ctx.session.createEvent.step = actionEnum.EDIT_DATE;
      await ctx.editMessageText(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –º–∞—Ç—á–∞ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ü—Ä–∏–º–µ—Ä: 2022-09-19 16:30\n\n–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ –º—Å–∫.',
      );
    });
    eventScene.action(actionEnum.EDIT_TEAM, async (ctx) => {
      ctx.session.createEvent.step = actionEnum.EDIT_TEAM;
      ctx.session.createEvent.teams = [];
      await ctx.editMessageText(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥ –ø–æ –æ—á–µ—Ä–µ–¥–∏\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üá∑üá∫ –ê–º–∫–∞—Ä',
      );
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã');
    });
    eventScene.action(actionEnum.EDIT_COEF, async (ctx) => {
      ctx.session.createEvent.step = actionEnum.EDIT_COEF;
      await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—á–∫–æ–≤ –∑–∞ –¥–∞–Ω–Ω—ã–π –º–∞—Ç—á –≤ –≤–∏–¥–µ –¥—Ä–æ–±–Ω–æ–≥–æ —á–∏—Å–ª–∞');
    });
    eventScene.action(actionEnum.EDIT_URL, async (ctx) => {
      ctx.session.createEvent.step = actionEnum.EDIT_URL;
      await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á');
    });
    eventScene.action(actionEnum.SAVE_EVENT, async (ctx) => {
      ctx.session.createEvent.step = actionEnum.SAVE_EVENT;
      if (
        !isNaN(new Date(ctx.session.createEvent.date)) &&
        ctx.session.createEvent.teams[1] &&
        ctx.session.createEvent.teams[2]
      ) {
        const t = await sequelize.transaction();
        const matchData = await V9kuMatch.create(
          {
            date: new Date(ctx.session.createEvent.date),
            team1: ctx.session.createEvent.teams[1],
            team2: ctx.session.createEvent.teams[2],
            coef: ctx.session.createEvent.coef || 1.0,
            url: ctx.session.createEvent.url,
          },
          { transaction: t },
        );
        // –ó–∞–Ω–æ—Å–∏–º —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await v9kuEventScheduler.scheduleEvents(matchData);

        const caption = `–ö–æ–º–∞–Ω–¥—ã: ${matchData.team1} - ${matchData.team2}
–í—Ä–µ–º—è: ${matchData.date.toLocaleString('ru-RU', timeFormatConfig)} –º—Å–∫.
${matchData.url ? '–°—Å—ã–ª–∫–∞: ' + matchData.url : ''}`;

        // FIXME: –†–∞—Å—Å—ã–ª–∫–∞ –º–∞—Ç—á–∞
        try {
          const users = await V9kuUser.findAll({ where: { enabled: true } });

          for (let user of users) {
            try {
              const caption = matchCaptionBuilder(user.name, matchData);
              const message = await ctx.replyWithMarkdown(caption.text, {
                reply_markup: {
                  inline_keyboard: [caption.buttons],
                },
              });
              await V9kuMessage.create(
                {
                  messageId: message.message_id,
                  userId: user.userId,
                  matchId: matchData.id,
                },
                { transaction: t },
              );
            } catch (ex) {
              console.log(`Blocked user ${user.userId}`);
            }
          }
          await t.commit();
          await ctx.editMessageText(`üèÜ –ú–∞—Ç—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n${caption}`);
          ctx.session.createEvent = null;
        } catch (ex) {
          await t.rollback();
          ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ');
          console.log(ex);
        }

        return await ctx.scene.leave();
      } else {
        await ctx.reply('–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      }
    });

    eventScene.on('text', async (ctx) => {
      const url = ctx.message.text;
      if (url === '/exit') {
        ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
        ctx.session.createEvent = null;
        return await ctx.scene.leave();
      }

      switch (ctx.session.createEvent.step) {
        case actionEnum.EDIT_DATE:
          const formattedDate = new Date(url.trim().split(' ').join('T') + '+03:00');
          if (isNaN(formattedDate) || formattedDate < new Date()) {
            await ctx.reply(`–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á –≤ –ø—Ä–æ—à–ª–æ–º`);
            return await ctx.scene.reenter();
          }
          ctx.session.createEvent.date = formattedDate;
          await ctx.reply(
            `–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${formattedDate.toLocaleString('ru-RU', timeFormatConfig)}`,
          );
          await ctx.scene.reenter();
          break;
        case actionEnum.EDIT_TEAM:
          if (!ctx.session.createEvent.teams[1]) {
            ctx.session.createEvent.teams[1] = url.trim();
            ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã');
          } else {
            ctx.session.createEvent.teams[2] = url.trim();
            ctx.reply(
              `–ö–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${ctx.session.createEvent.teams[1]} - ${ctx.session.createEvent.teams[2]}`,
            );
            await ctx.scene.reenter();
          }
          break;
        case actionEnum.EDIT_COEF:
          const coef = Number(url.trim().split(',').join('.'));
          if (isNaN(coef) || coef <= 0) {
            await ctx.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
            return await ctx.scene.reenter();
          }
          ctx.session.createEvent.coef = Number(coef);
          await ctx.reply('–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
          await ctx.scene.reenter();
          break;
        case actionEnum.EDIT_URL:
          ctx.session.createEvent.url = url.trim();
          await ctx.reply('–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
          await ctx.scene.reenter();
          break;
        default:
          ctx.reply('–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /exit');
          await ctx.scene.reenter();
          break;
      }
    });

    eventScene.leave((ctx) => {});

    return eventScene;
  }

  ScoreSetScene() {
    const scoreScene = new Scenes.BaseScene('set_score');

    scoreScene.enter(async (ctx) => {
      const matchData = await V9kuMatch.findOne({
        where: { score: null, date: { [Op.lte]: new Date() } },
        order: [['date', 'ASC']],
      });
      if (!matchData) {
        await ctx.reply('–ë–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞—Ç—á–µ–π –±–µ–∑ —Å—á–µ—Ç–∞, –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /exit');
        ctx.session.currentEvent = undefined;
        return await ctx.scene.leave();
      }
      ctx.session.currentEvent = matchData.id;
      const caption = `–ö–æ–º–∞–Ω–¥—ã: ${matchData.team1} - ${matchData.team2}
–í—Ä–µ–º—è: ${matchData.date.toLocaleString('ru-RU', timeFormatConfig)} –º—Å–∫.
${matchData.url ? '–°—Å—ã–ª–∫–∞: ' + matchData.url : ''}`;
      ctx.reply(`${caption}\n–í–≤–µ–¥–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2:5, –ª–∏–±–æ 2-5`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é`,
                callback_data: 'EXIT_MENU',
              },
            ],
          ],
        },
      });
    });

    scoreScene.action('EXIT_MENU', async (ctx) => {
      await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –æ—á–∫–æ–≤');
      ctx.session.currentEvent = undefined;
      return await ctx.scene.leave();
    });

    scoreScene.on('text', async (ctx) => {
      const url = ctx.message.text.trim();
      if (ctx.session.currentEvent === undefined || url === '/exit') {
        ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ –æ—á–∫–æ–≤');
        ctx.session.currentEvent = undefined;
        return await ctx.scene.leave();
      }

      // FIXME: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—á–∫–æ–≤
      const score = url.split(/\:|-/);
      const t = await sequelize.transaction();
      if (score.length === 2 && Number(score[0]) >= 0 && Number(score[1]) >= 0) {
        try {
          const [, [updatedEvent]] = await V9kuMatch.update(
            { score: score },
            {
              where: {
                id: ctx.session.currentEvent,
              },
              transaction: t,
              returning: true,
            },
          );
          const votes = await V9kuVote.findAll({
            where: { matchId: updatedEvent.id },
            transaction: t,
          });
          for (let vote of votes) {
            const reward = countReward(vote, score) * updatedEvent.coef;
            await V9kuUser.update(
              { score: sequelize.literal(`score + ${reward}`) },
              { where: { userId: vote.userId }, returning: true, transaction: t },
            );
            ctx.telegram
              .sendMessage(
                vote.userId,
                `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${reward} –æ—á–∫–æ–≤ –∑–∞ –º–∞—Ç—á ${updatedEvent.team1} - ${updatedEvent.team2}!`,
              )
              .catch((ex) => {
                console.log(`Unable to deliver message to ${vote.userId}`, ex);
              });
          }
          await t.commit();
        } catch (ex) {
          await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑`);
          console.log(ex);
          await ctx.scene.reenter();
          await t.rollback();
        }
        await ctx.reply(`–°—á–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${score[0]} ‚Äì ${score[1]}`);
        return await ctx.scene.reenter();
      } else {
        ctx.reply(`–°—á–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π`);
        return await ctx.scene.reenter();
      }
    });

    scoreScene.leave((ctx) => {});

    return scoreScene;
  }

  SendingScene() {
    const sendngScene = new Scenes.BaseScene('sending');

    sendngScene.enter((ctx) => {
      ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /exit –¥–ª—è –≤—ã—Ö–æ–¥–∞`, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é`,
                callback_data: 'EXIT_MENU',
              },
            ],
          ],
        },
      });
    });

    sendngScene.action('EXIT_MENU', async (ctx) => {
      await ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
      return await ctx.scene.leave();
    });

    sendngScene.on('text', async (ctx) => {
      const msg = ctx.message.text;
      if (msg === '/exit') {
        ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
        return await ctx.scene.leave();
      }

      try {
        const users = await V9kuUser.findAll({ where: { enabled: true } });
        for (let user of users) {
          try {
            await ctx.telegram.sendMessage(
              user.userId,
              '‚ö° [–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞]\n\n' + msg,
            );
          } catch (ex) {
            console.log(`Blocked user ${user.userId}`);
          }
        }
        ctx.replyWithMarkdown(
          `*–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:*\n\n${msg}`,
        );
      } catch (ex) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ');
        console.log(ex);
      }
      return await ctx.scene.leave();
    });

    sendngScene.leave((ctx) => {});

    return sendngScene;
  }
}
